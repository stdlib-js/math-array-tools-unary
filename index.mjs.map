{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/array-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport contains from '@stdlib/array-base-assert-contains';\nimport unary from '@stdlib/strided-base-unary';\nimport odtype from '@stdlib/ndarray-base-unary-output-dtype';\nimport empty from '@stdlib/array-empty';\nimport dtype from '@stdlib/array-dtype';\nimport everyBy from '@stdlib/array-base-every-by';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar GENERIC_DTYPE = 'generic';\n\n\n// MAIN //\n\n/**\n* Constructor for applying a unary function to each element in an input array.\n*\n* @constructor\n* @param {Function} fcn - unary function to apply\n* @param {StringArray} idtypes - list of supported input data types\n* @param {StringArray} odtypes - list of supported output data types\n* @param {string} policy - output data type policy\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be a supported output data type policy\n* @returns {Unary} instance\n*\n* @example\n* import base from '@stdlib/math-base-special-abs';\n* import dtypes from '@stdlib/array-dtypes';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var abs = new Unary( base, idt, odt, policy );\n*\n* var x = [ -1.0, -2.0, -3.0 ];\n*\n* var y = abs.apply( x );\n* // returns [ 1.0, 2.0, 3.0 ]\n*/\nfunction Unary( fcn, idtypes, odtypes, policy ) {\n\tif ( !( this instanceof Unary ) ) {\n\t\treturn new Unary( fcn, idtypes, odtypes, policy );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'null3c', fcn ) );\n\t}\n\tif (\n\t\t!isCollection( idtypes ) ||\n\t\tidtypes.length < 1 ||\n\t\t!everyBy( idtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of data types. Value: `%s`.', idtypes ) );\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policy ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a supported output data type policy. Value: `%s`.', policy ) );\n\t}\n\tthis._fcn = fcn;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policy = policy;\n\treturn this;\n}\n\n/**\n* Applies a unary function to each element in a provided input array.\n*\n* @name apply\n* @memberof Unary.prototype\n* @type {Function}\n* @param {Collection} x - input array\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Collection} output array\n*\n* @example\n* import base from '@stdlib/math-base-special-abs';\n* import dtypes from '@stdlib/array-dtypes';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var abs = new Unary( base, idt, odt, policy );\n*\n* var x = [ -1.0, -2.0, -3.0 ];\n*\n* var y = abs.apply( x );\n* // returns [ 1.0, 2.0, 3.0 ]\n*/\nsetReadOnly( Unary.prototype, 'apply', function apply( x, options ) {\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar dt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'null2O', x ) );\n\t}\n\tdt = dtype( x ) || GENERIC_DTYPE;\n\tif ( !contains( this._idtypes, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', this._idtypes.join( '\", \"' ), dt ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdt = opts.dtype || odtype( dt, this._policy );\n\tout = empty( x.length, dt );\n\tunary( [ x, out ], [ x.length ], [ 1, 1 ], this._fcn );\n\treturn out;\n});\n\n/**\n* Applies a unary function to each element in a provided input array and assigns results to a provided output array.\n*\n* @name assign\n* @memberof Unary.prototype\n* @type {Function}\n* @param {Collection} x - input array\n* @param {Collection} out - output array\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} second argument must be a collection\n* @returns {Collection} output array\n*\n* @example\n* import base from '@stdlib/math-base-special-abs';\n* import dtypes from '@stdlib/array-dtypes';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var abs = new Unary( base, idt, odt, policy );\n*\n* var x = [ -1.0, -2.0, -3.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var out = abs.assign( x, y );\n* // returns [ 1.0, 2.0, 3.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( Unary.prototype, 'assign', function assign( x, out ) {\n\tvar dt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'null2O', x ) );\n\t}\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'null2y', out ) );\n\t}\n\t// Validate the input array data type in order to maintain similar behavior to `apply` above...\n\tdt = dtype( x ) || GENERIC_DTYPE;\n\tif ( !contains( this._idtypes, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', this._idtypes.join( '\", \"' ), dt ) );\n\t}\n\t// Note: we intentionally don't validate the output array dtype because (1) maintains parity with `@stdlib/random/array/tools/unary` and (2) allowing any dtype provides an escape hatch for a user wanting to have an output array having a specific dtype that `apply` does not support\n\n\tunary( [ x, out ], [ x.length ], [ 1, 1 ], this._fcn );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', dtypes.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["GENERIC_DTYPE","Unary","fcn","idtypes","odtypes","policy","this","isFunction","TypeError","format","isCollection","length","everyBy","isDataType","isOutputDataTypePolicy","_fcn","_idtypes","_odtypes","_policy","setReadOnly","prototype","x","options","opts","err","out","dt","dtype","contains","join","arguments","dtypes","isObject","hasOwnProp","validate","odtype","empty","unary"],"mappings":";;y2CAyCA,IAAIA,EAAgB,UAkCpB,SAASC,EAAOC,EAAKC,EAASC,EAASC,GACtC,KAAQC,gBAAgBL,GACvB,OAAO,IAAIA,EAAOC,EAAKC,EAASC,EAASC,GAE1C,IAAME,EAAYL,GACjB,MAAM,IAAIM,UAAWC,EAAQ,SAAUP,IAExC,IACEQ,EAAcP,IACfA,EAAQQ,OAAS,IAChBC,EAAST,EAASU,GAEnB,MAAM,IAAIL,UAAWC,EAAQ,iFAAkFN,IAEhH,IACEO,EAAcN,IACfA,EAAQO,OAAS,IAChBC,EAASR,EAASS,GAEnB,MAAM,IAAIL,UAAWC,EAAQ,gFAAiFL,IAE/G,IAAMU,EAAwBT,GAC7B,MAAM,IAAIG,UAAWC,EAAQ,8FAA+FJ,IAM7H,OAJAC,KAAKS,KAAOb,EACZI,KAAKU,SAAWb,EAChBG,KAAKW,SAAWb,EAChBE,KAAKY,QAAUb,EACRC,IACR,CAgCAa,EAAalB,EAAMmB,UAAW,SAAS,SAAgBC,EAAGC,GACzD,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMhB,EAAcW,GACnB,MAAM,IAAIb,UAAWC,EAAQ,SAAUY,IAGxC,GADAK,EAAKC,EAAON,IAAOrB,GACb4B,EAAUtB,KAAKU,SAAUU,GAC9B,MAAM,IAAIlB,UAAWC,EAAQ,qGAAsGH,KAAKU,SAASa,KAAM,QAAUH,IAGlK,GADAH,EAAO,CAAA,EACFO,UAAUnB,OAAS,IACvBa,ECnGF,SAAmBD,EAAMQ,EAAQT,GAChC,OAAMU,EAAUV,GAGXW,EAAYX,EAAS,WACzBC,EAAKI,MAAQL,EAAQK,OACfC,EAAUG,EAAQR,EAAKI,QACrB,IAAInB,UAAWC,EAAQ,SAAU,QAASsB,EAAOF,KAAM,QAAUN,EAAKI,QAGxE,KARC,IAAInB,UAAWC,EAAQ,SAAUa,GAS1C,CDwFQY,CAAUX,EAAMjB,KAAKW,SAAUK,GAChCE,GACJ,MAAMA,EAMR,OAHAE,EAAKH,EAAKI,OAASQ,EAAQT,EAAIpB,KAAKY,SACpCO,EAAMW,EAAOf,EAAEV,OAAQe,GACvBW,EAAO,CAAEhB,EAAGI,GAAO,CAAEJ,EAAEV,QAAU,CAAE,EAAG,GAAKL,KAAKS,MACzCU,CACR,IAkCAN,EAAalB,EAAMmB,UAAW,UAAU,SAAiBC,EAAGI,GAC3D,IAAIC,EACJ,IAAMhB,EAAcW,GACnB,MAAM,IAAIb,UAAWC,EAAQ,SAAUY,IAExC,IAAMX,EAAce,GACnB,MAAM,IAAIjB,UAAWC,EAAQ,SAAUgB,IAIxC,GADAC,EAAKC,EAAON,IAAOrB,GACb4B,EAAUtB,KAAKU,SAAUU,GAC9B,MAAM,IAAIlB,UAAWC,EAAQ,qGAAsGH,KAAKU,SAASa,KAAM,QAAUH,IAKlK,OADAW,EAAO,CAAEhB,EAAGI,GAAO,CAAEJ,EAAEV,QAAU,CAAE,EAAG,GAAKL,KAAKS,MACzCU,CACR"}