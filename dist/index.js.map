{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isDataType = require( '@stdlib/array-base-assert-is-data-type' );\nvar isOutputDataTypePolicy = require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar unary = require( '@stdlib/strided-base-unary' );\nvar odtype = require( '@stdlib/ndarray-base-unary-output-dtype' );\nvar empty = require( '@stdlib/array-empty' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar everyBy = require( '@stdlib/array-base-every-by' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar GENERIC_DTYPE = 'generic';\n\n\n// MAIN //\n\n/**\n* Constructor for applying a unary function to each element in an input array.\n*\n* @constructor\n* @param {Function} fcn - unary function to apply\n* @param {StringArray} idtypes - list of supported input data types\n* @param {StringArray} odtypes - list of supported output data types\n* @param {string} policy - output data type policy\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be a supported output data type policy\n* @returns {Unary} instance\n*\n* @example\n* var base = require( '@stdlib/math-base-special-abs' );\n* var dtypes = require( '@stdlib/array-dtypes' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var abs = new Unary( base, idt, odt, policy );\n*\n* var x = [ -1.0, -2.0, -3.0 ];\n*\n* var y = abs.apply( x );\n* // returns [ 1.0, 2.0, 3.0 ]\n*/\nfunction Unary( fcn, idtypes, odtypes, policy ) {\n\tif ( !( this instanceof Unary ) ) {\n\t\treturn new Unary( fcn, idtypes, odtypes, policy );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif (\n\t\t!isCollection( idtypes ) ||\n\t\tidtypes.length < 1 ||\n\t\t!everyBy( idtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of data types. Value: `%s`.', idtypes ) );\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policy ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a supported output data type policy. Value: `%s`.', policy ) );\n\t}\n\tthis._fcn = fcn;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policy = policy;\n\treturn this;\n}\n\n/**\n* Applies a unary function to each element in a provided input array.\n*\n* @name apply\n* @memberof Unary.prototype\n* @type {Function}\n* @param {Collection} x - input array\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Collection} output array\n*\n* @example\n* var base = require( '@stdlib/math-base-special-abs' );\n* var dtypes = require( '@stdlib/array-dtypes' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var abs = new Unary( base, idt, odt, policy );\n*\n* var x = [ -1.0, -2.0, -3.0 ];\n*\n* var y = abs.apply( x );\n* // returns [ 1.0, 2.0, 3.0 ]\n*/\nsetReadOnly( Unary.prototype, 'apply', function apply( x, options ) {\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar dt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', x ) );\n\t}\n\tdt = dtype( x ) || GENERIC_DTYPE;\n\tif ( !contains( this._idtypes, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', this._idtypes.join( '\", \"' ), dt ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdt = opts.dtype || odtype( dt, this._policy );\n\tout = empty( x.length, dt );\n\tunary( [ x, out ], [ x.length ], [ 1, 1 ], this._fcn );\n\treturn out;\n});\n\n/**\n* Applies a unary function to each element in a provided input array and assigns results to a provided output array.\n*\n* @name assign\n* @memberof Unary.prototype\n* @type {Function}\n* @param {Collection} x - input array\n* @param {Collection} out - output array\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} second argument must be a collection\n* @returns {Collection} output array\n*\n* @example\n* var base = require( '@stdlib/math-base-special-abs' );\n* var dtypes = require( '@stdlib/array-dtypes' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var abs = new Unary( base, idt, odt, policy );\n*\n* var x = [ -1.0, -2.0, -3.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var out = abs.assign( x, y );\n* // returns [ 1.0, 2.0, 3.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( Unary.prototype, 'assign', function assign( x, out ) {\n\tvar dt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', x ) );\n\t}\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\t// Validate the input array data type in order to maintain similar behavior to `apply` above...\n\tdt = dtype( x ) || GENERIC_DTYPE;\n\tif ( !contains( this._idtypes, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', this._idtypes.join( '\", \"' ), dt ) );\n\t}\n\t// Note: we intentionally don't validate the output array dtype because (1) maintains parity with `@stdlib/random/array/tools/unary` and (2) allowing any dtype provides an escape hatch for a user wanting to have an output array having a specific dtype that `apply` does not support\n\n\tunary( [ x, out ], [ x.length ], [ 1, 1 ], this._fcn );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nmodule.exports = Unary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for applying a unary function to each element in an input array.\n*\n* @module @stdlib/math-array-tools-unary\n*\n* @example\n* var base = require( '@stdlib/math-base-special-abs' );\n* var dtypes = require( '@stdlib/array-dtypes' );\n* var Unary = require( '@stdlib/math-array-tools-unary' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var abs = new Unary( base, idt, odt, policy );\n*\n* var x = [ -1.0, -2.0, -3.0 ];\n*\n* var y = abs.apply( x );\n* // returns [ 1.0, 2.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "contains", "format", "validate", "opts", "dtypes", "options", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isFunction", "isCollection", "isDataType", "isOutputDataTypePolicy", "contains", "unary", "odtype", "empty", "dtype", "everyBy", "format", "validate", "GENERIC_DTYPE", "Unary", "fcn", "idtypes", "odtypes", "policy", "x", "options", "opts", "err", "out", "dt", "main"]
}
